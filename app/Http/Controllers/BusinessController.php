<?php namespace App\Http\Controllers;use Auth;use Illuminate\Http\Request;use Illuminate\Support\Facades\Validator;use App\Models\Business;use Hash;use Illuminate\Contracts\Auth\Guard;use Illuminate\Contracts\Auth\Registrar;use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;use Session;use App\Models\Blog;use App\Models\Category;use App\Models\Article;use App\Models\Cms;use Illuminate\Html\FormFacade;use Illuminate\Html\HtmlFacade;use App\Models\Country;use App\Models\State;use App\Models\City;use App\Models\BusinessImage;use Input;use Carbon\Carbon;use DB;use Illuminate\Pagination\LengthAwarePaginator as Paginators;//require app_path().'/helpers/common.php';class BusinessController extends Controller {	public function __construct()	{		//$this->middleware('auth');	}	/*	********** This function use for business insert **************	*/	public function getBusiness(Request $request)	{		$countryValue=Country::where('order_flag',1)->get(['countryID','countryName'])->toarray();		$categoryValue=Category::where('is_active',1)->get(['id','title'])->toarray();		$data['countryValue']=$countryValue;		$data['categoryValue'] =$categoryValue;		if ($request->isMethod('post')) {		$validator = Validator::make($request->all(), [		'title' => 'required',		'description' => 'required',		//'image_upload' => 'required',		'address' => 'required',		'country' => 'required',		 'state' => 'required',		 'city' => 'required',		 'zip' => 'required',		 'category_id' => 'required',		 'phone' => 'required',		'terms'=>'required',		'captcha' => 'required|captcha'		]);				if ($validator->fails()) 		{			//echo "<pre>";			//print_r($validator);die;			return redirect('user-business')                        ->withErrors($validator)                        ->withInput();		}		else{				$user = new Business;				//this section for save latitude and longitude from zip code				//$address = trim($response['town']).', '.trim($response['county']).', '.$country_nm.' '.trim($response['postcode']);								$addressForLatLong=trim($request->zip);								$latitude = '';			$longitude = '';			// We get the JSON results from this request			$geo = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.urlencode($addressForLatLong).'&sensor=false');			// We convert the JSON to an array			$geo = json_decode($geo, true);			// If everything is ok			if ($geo['status'] = 'OK') {				if(count($geo['results']) > 0)				{					// We set our values					$latitude = $geo['results'][0]['geometry']['location']['lat'];					$longitude = $geo['results'][0]['geometry']['location']['lng'];				}			}             //this section for save latitude and longitude from zip code				// this section for image upload			if($request->hasFile('image_upload')) {            $file = Input::file('image_upload');            //getting timestamp            $timestamp = str_replace([' ', ':'], '-', Carbon::now()->toDateTimeString());            $name = $timestamp. '-' .$file->getClientOriginalName();            $file->move(public_path().'/business_images/', $name);	         $user->image_upload=$name;             }				// this section for image upload					$user->title = $request->title;				$user->description = $request->description;				$user->address = $request->address;				$user->country = $request->country;				$user->state = $request->state;				$user->city = $request->city;				$user->zip = $request->zip;				$user->phone = $request->phone;				$user->category_id=$request->category_id;				$user->is_active=1;				$user->user_id=Auth::user()->id;				$user->latitude=$latitude;				$user->longitude=$longitude;				$user->save();                  // laravel multiple image upload				 			      $files = Input::file('file');			      $fileNameArr=[];			      $businessImageUp=array();			       $businessImageModel= new BusinessImage;			    			      				foreach ($files as $file) {				    // Validate each file				    $rules = array('file' => 'required'); // 'required|mimes:png,gif,jpeg,txt,pdf,doc'				    $validator = Validator::make(array('file'=> $file), $rules);                    				    if($validator->passes()) {				        				        $filename = $file->getClientOriginalName(); 				        $fileNameArr=$file->getClientOriginalName(); 				        $timestamp = str_replace([' ', ':'], '-', Carbon::now()->toDateTimeString());				            $businessImage = $timestamp. '-' .$filename;			$file->move(public_path().'/business_images/', $businessImage);			                  					  BusinessImage::create(['name'=>$businessImage,'business_id'=>$user->id]);				        // Flash a message and return the user back to a page...				    } else {				        // redirect back with errors.			return redirect('user-business')->withErrors($validator)->withInput();				    }								}              // laravel multiple image upload				return redirect('view-business')->with('alert-success', 'Register Successfully');			}		}		return view('dashboard',$data);	}	/*	********** This function use for business Edit **************	*/	public function edit(Request $request)	{         $id=$request['id'];         $userId=Auth::user()->id;         $business = Business::findOrFail($id);         $countryId=$business['country'];         $stateId=$business['state'];         $cityId=$business['city'];         $data['title']=$business['title'];         $data['description']=$business['description'];         $data['country']=$business['country'];         $data['state']=$business['state'];         $data['city']=$business['city'];         $data['zip']=$business['zip'];         $data['address']=$business['address'];         $data['phone']=$business['phone'];         $data['category_id']=$business['category_id'];         $data['id']=$business['id'];         $data['is_active']=1;         //echo $data['state'];die();                  //print_r($user);die();        //echo $id;die();		$countryValue=Country::where('order_flag',1)->get(['countryID','countryName'])->toarray();$stateValue=State::where('countryID',$countryId)->get(['stateID','stateName'])->toarray();$cityValue=City::where('stateID',$stateId)->get(['cityID','cityName'])->toarray();				$data['countryValue']=$countryValue;		$data['stateValue']=$stateValue;		$data['cityValue']=$cityValue;				$categoryValue=Category::where('is_active',1)->get(['id','title'])->toarray();				$data['categoryValue'] =$categoryValue;        if ($request->isMethod('post')) {		$validator = Validator::make($request->all(), [		'title' => 'required',		'description' => 'required',		//'image_upload' => 'required',		'address' => 'required',		'country' => 'required',		 'state' => 'required',		 'city' => 'required',		 'zip' => 'required',		 'category_id' => 'required',		 'phone' => 'required'				]);				if ($validator->fails()) 		{			//echo "<pre>";			//print_r($validator);die;			return redirect('edit-business?id='.$data['id'].'')                        ->withErrors($validator)                        ->withInput();		}		else{				$business = new Business;				//this section for save latitude and longitude from zip code				//$address = trim($response['town']).', '.trim($response['county']).', '.$country_nm.' '.trim($response['postcode']);								$addressForLatLong=trim($request->zip);								$latitude = '';			$longitude = '';			// We get the JSON results from this request			$geo = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.urlencode($addressForLatLong).'&sensor=false');			// We convert the JSON to an array			$geo = json_decode($geo, true);			// If everything is ok			if ($geo['status'] = 'OK') {				if(count($geo['results']) > 0)				{					// We set our values					$latitude = $geo['results'][0]['geometry']['location']['lat'];					$longitude = $geo['results'][0]['geometry']['location']['lng'];				}			}             //this section for save latitude and longitude from zip code				// this section for image upload					$input = $request->all();                 $input = $request->except('_token','terms','id');                 //print_r($input);die();                // $input = $request->except('terms');    			$Business=Business::findOrFail($id)->update($input);                 // this section for multiple file upload     			$files = Input::file('file');					foreach ($files as $file) {				    // Validate each file				    $rules = array('file' => 'required'); // 'required|mimes:png,gif,jpeg,txt,pdf,doc'				    $validator = Validator::make(array('file'=> $file), $rules);                    				    if($validator->passes()) {				        				        $filename = $file->getClientOriginalName(); 				        $fileNameArr=$file->getClientOriginalName(); 				        $timestamp = str_replace([' ', ':'], '-', Carbon::now()->toDateTimeString());				            $businessImage = $timestamp. '-' .$filename;			$file->move(public_path().'/business_images/', $businessImage);			                  					  BusinessImage::create(['name'=>$businessImage,'business_id'=>$id]);				        // Flash a message and return the user back to a page...				    } else {				        // redirect back with errors.			return redirect('edit-business?id='.$data['id'].'')->withErrors($validator)->withInput();				    }								} 	//Session::flash('flash_message', 'Task successfully added!');				   Session::flash('alert-success-message', 'Successfully Edited.');                    return redirect()->back();				              // laravel multiple image upload                 				return redirect('edit-business?id='.$data['id'].'')->with('alert-success', 'Register Successfully');			}		}         // this code implement for uploaded business image		$uploadBusinessImage=BusinessImage::where('is_active',1)->		where('business_id',$id)->		get(['id','name','business_id'])->toarray();		$data['providerimages'] = $uploadBusinessImage;		$data['imgcount'] = 8;        //print_r($uploadBusinessImage);die();       return view('editBusiness',$data);	}    /*	********** This function use for getting state result by country code **************	*/		public function getStates(Request $request)	{		  $output="";	  $output.="<option>Select One</option>";	  $country_id=$request['country_id'];	 	  $stateValue=State::where('countryID',$country_id)->get(['stateID','stateName'])->toarray();	  for($i=0;$i<count($stateValue);$i++)	  {	   $output.="<option value=".$stateValue[$i]['stateID'].">".$stateValue[$i]['stateName']."</option>";	  }	  return $output;	  die;	}	public function getC(Request $request)	{	echo "Hello";	die;	}   /*	********** This function use for getting City result by state code **************	*/	public function getCites(Request $request)	{	  $output="";	  $output.="<option>Select One</option>";	  $state_id=$request['state_id'];	 	  $cityValue=City::where('stateID',$state_id)->get(['cityID','cityName'])->toarray();	  for($i=0;$i<count($cityValue);$i++)	  {	   $output.="<option value=".$cityValue[$i]['cityID'].">".$cityValue[$i]['cityName']."</option>";	  }	  return $output;	   die;	}	/*	********** This function use for view business by login user **************	*/	public function viewBusiness(request $request)	{		$countryValue=Country::where('order_flag',1)->get(['countryID','countryName'])->toarray();		$categoryValue=Category::where('is_active',1)->get(['id','title'])->toarray();		$data['countryValue']=$countryValue;		$data['categoryValue'] =$categoryValue;		// this section for view business 		$userId=Auth::user()->id;		$viewBusiness=Business::		where('businesses.is_active',1)->		where('user_id',Auth::user()->id)->		paginate(5, ['businesses.id','businesses.title','description','address','phone'])->toarray();         //print_r($viewBusiness);die();		$pagination = new Paginators($viewBusiness, $viewBusiness['total'],$viewBusiness['per_page']);	 $pagination->setPath(url('view-business'));      $data['render']=$pagination->render();           for($i=0;$i<count($viewBusiness['data']);$i++)           	{           		$multipleImages=BusinessImage::where('business_images.business_id',$viewBusiness['data'][$i]['id'])->where('business_images.is_active',1)->orderBy('business_images.id','desc')->take(1)->get(['name'])->toarray();           		if(!empty($multipleImages))           		   $viewBusiness['data'][$i]['image_upload']=$multipleImages[0]['name'];           		else           			$viewBusiness['data'][$i]['image_upload']='no_image.jpg';           	}        // print_r($viewBusiness);die();		$data['business']=$viewBusiness['data'];		//print_r($viewBusiness);die();		if(empty($data['business']))	   {	            $data['errorMessage']='No Records Found';	   }		return view('business',$data);	}	/*	********** This function use for get business detail by id **************	*/	public function details(Request $request,$id,$title)	{	$viewBusiness=Business::where('is_active',1)->where('id',$id)->get(['id','title','description','image_upload','phone','address'])->toarray();	// this section for multiple image            for($i=0;$i<count($viewBusiness);$i++)           	{           		$multipleImages=BusinessImage::where('business_images.business_id',$viewBusiness[$i]['id'])->where('business_images.is_active',1)->orderBy('business_images.id','desc')->take(5)->get(['name'])->toarray();           		if(!empty($multipleImages))           		   $viewBusiness[$i]['image_upload']=$multipleImages[0]['name'];           		else           			$viewBusiness[$i]['image_upload']='no_image.jpg';           		//for thumb image esction            		//print_r($multipleImages);die();           		for($j=0;$j<count($multipleImages);$j++)           		{           		  $viewBusiness[$i]['image_thumb_multi'][$j] = $multipleImages[$j]['name'];           		}           		//for thumb image esction            	}           //	print_r($viewBusiness);die();           	// this section for multiple image 		$data['business']=$viewBusiness;    return view('businessView',$data);	}	/*	********** This function use for view business by Category **************	*/	public function getBusinessByCategory(Request $request,$categoryId,$categoryName)	{		   $viewBusiness=Business::where('is_active',1)->where('category_id',$categoryId)->paginate(5,['id','title','description','image_upload','address','phone'])->toarray();	   //print_r($viewBusiness);die();         //print_r($viewBusiness);die();		$pagination = new Paginators($viewBusiness, $viewBusiness['total'],$viewBusiness['per_page']);	 $pagination->setPath(url('/user-business-detail/'.$categoryId.'/'.$categoryName.''));      $data['render']=$pagination->render();	   		for($i=0;$i<count($viewBusiness['data']);$i++)           	{           		$multipleImages=BusinessImage::where('business_images.business_id',$viewBusiness['data'][$i]['id'])->where('business_images.is_active',1)->orderBy('business_images.id','desc')->take(1)->get(['name'])->toarray();           		if(!empty($multipleImages))           		   $viewBusiness['data'][$i]['image_upload']=$multipleImages[0]['name'];           		else           			$viewBusiness['data'][$i]['image_upload']='no_image.jpg';           	}	   $data['business']=$viewBusiness['data'];	   if(empty($data['business']))	   {         $data['errorMessage']='No Records Found';	   }	   return view('businessByCategory',$data);	}	/*	********** this function use for search business by category nama and keyword**************	*/	public function searchProduct(Request $request){	 //this section for like query string implementing	 $title=$request['title'];	 $country=$request['country'];	 $state=$request['state'];	 $city=$request['city'];	 $description=$request['description']; //$keyword=$request['keyword'];  if($request['keyword']!="") { 	Session::put('keyword',$request['keyword']); 	$keyword=Session::get('keyword'); } if($request['category']!="") { 	Session::put('category',$request['category']); 	 } if(!isset($request['category'])  && !isset($request['page'])) {       $request->session()->forget('category'); } if(!isset($request['keyword'])  && !isset($request['page'])) {       $request->session()->forget('keyword'); }    $likeQueryPart='';    $categoeyQueryPart="";    $page = Input::get('page', 1);    //$page = (!empty($request['page'])?$request['page']:0);		$limit =5;	$offset = ($limit*$page)-$limit; if(Session::get('keyword')!="") { 	if($likeQueryPart!="") 		$likeQueryPart.=" OR businesses.title LIKE  '%".Session::get('keyword')."%' OR businesses.description LIKE  '%".Session::get('keyword')."%'"; 	else 		$likeQueryPart.=" AND (businesses.title LIKE  '%".Session::get('keyword')."%' OR businesses.description LIKE  '%".Session::get('keyword')."%')"; }if(Session::get('category')!="")	{    $categoeyQueryPart.=" AND ( category.title LIKE '%".Session::get('category')."%')";	}    $limitQuerypart='LIMIT $offset, $limit';     //this section for when user not login (Not filter by nearby user)     $nearbyQueryPart="";     $orderBy="";     if(Auth::check())     {	$userLatitude = Auth::user()->latitude;	 $userLongitude = Auth::user()->longitude;	 $nearbyQueryPart= ",SQRT(    POW(69.1 * (businesses.latitude - ".$userLatitude."), 2) +    POW(69.1 * (".$userLongitude."- businesses.longitude) * COS(businesses.latitude / 57.3), 2)) AS distance";    $orderBy="distance";     }     else     {   $nearbyQueryPart="";   $orderBy="businesses.id";     }    //this section for when user not login (Not filter by nearby user)$searchResult=DB::select(DB::raw("select businesses.*,category.title as categoryName,states.stateName,	cities.cityName ".$nearbyQueryPart."  FROM  businesses 	LEFT JOIN category on category.id=businesses.category_id 	LEFT JOIN states on states.stateID=businesses.state 	LEFT JOIN cities on cities.cityID=businesses.city    	where  businesses.is_active=1 ".$likeQueryPart." ".$categoeyQueryPart." ORDER BY ".$orderBy." ASC LIMIT $offset, $limit"));     $searchResultTwo=DB::select(DB::raw("select businesses.*,category.title as categoryName,states.stateName,cities.cityName ".$nearbyQueryPart."  FROM  businesses 	LEFT JOIN category on category.id=businesses.category_id 	LEFT JOIN states on states.stateID=businesses.state 	LEFT JOIN cities on cities.cityID=businesses.city 		where  businesses.is_active=1 ".$likeQueryPart." ".$categoeyQueryPart." ORDER BY ".$orderBy." ASC"));//print_r($searchResultTwo);die();  //print_r($searchResult);die();foreach($searchResult as $key=>$srch){$searchResult[$key]->image_upload = $this->primaryImage($srch->id);}$pagination = new Paginators($searchResult, count($searchResultTwo),5);	 $pagination->setPath('search-product');      $data['render']=$pagination->render();		$data['searchResult'] =$searchResult;if(empty($searchResult))	   {	            $data['errorMessage']='No Records Found';	   }	   //print_r($data);die();      return view('searchBusiness',$data);}   /*	********** this function use for view advance search page **************	*/public function advanceSearch()	{	$categoryValue=Category::where('is_active',1)->get(['id','title'])->toarray();	$data['categoryValue'] =$categoryValue;	return view('advanceSearch',$data);	}	public function destroy(Request $request)	{		$id=$request['id'];		//soft delete		$softDelete=DB::table('business_images')->		where('id',$id)->		update(['is_active'=>0]);		return ['success'=>'true'];	}  /*	********** this function use for get business image by id**************	*/	public function primaryImage($id)	{		$noImage='no_image.jpg';       $businessImages=BusinessImage::where('is_active',1)->       where('business_id',$id)->get(['name'])->take(1)->toarray();              if(!empty($businessImages))       {       	return $businessImages[0]['name'];       }       else           return $noImage; 	}          }